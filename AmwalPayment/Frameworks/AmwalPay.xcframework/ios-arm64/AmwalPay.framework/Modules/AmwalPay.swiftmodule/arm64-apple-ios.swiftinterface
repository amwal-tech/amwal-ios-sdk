// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AmwalPay
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AmwalPay
import AuthenticationServices
import Combine
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
import PassKit
import SafariServices
import Security
import Swift
import SwiftUI
import UIKit
import Vision
import VisionKit
import WebKit
import _AuthenticationServices_SwiftUI
import _Concurrency
import _PassKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
public struct NetworkBuilder {
  public init(endpoint: Swift.String, body: (any Swift.Encodable)? = nil, method: AmwalPay.HTTPMethod, encodingStrategy: Foundation.JSONEncoder.KeyEncodingStrategy = .convertToSnakeCase)
}
public enum HTTPMethod : Swift.String {
  case post
  case get
  case delete
  case put
  case patch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SwiftUI.View {
  public func cornerRadius(_ radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner) -> some SwiftUI.View
  
}
public struct RoundedCorner : SwiftUI.Shape {
  public func path(in rect: CoreFoundation.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<AmwalPay.RoundedCorner, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, *)
extension SwiftUI.View {
  @_disfavoredOverload public func onChange<V>(of value: V, perform action: @escaping (V) -> Swift.Void) -> some SwiftUI.View where V : Swift.Equatable
  
}
extension Swift.String {
  public func format(_ format: Swift.String, oldString: Swift.String) -> Swift.String
  public func unformat(_ format: Swift.String, oldString: Swift.String) -> Swift.String
}
public enum HorizonColor : Swift.String {
  case blackColor
  case darkGrayColor
  case lightGrayColor
  case mediumGrayColor
  case interactiveEnableColor
  case interactiveDisableColor
  case whiteColor
  case redLightColor
  case surface
  case secondary
  case greenColor
  case shieldColor
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SwiftUI.Color {
  public static func horizon(_ color: AmwalPay.HorizonColor) -> SwiftUI.Color
}
extension Swift.Encodable {
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public var asURLParameter: Swift.String {
    get
  }
}
public struct AmwalPayButton : SwiftUI.View {
  public init(currency: AmwalPay.Currency, amount: Swift.Double, vat: Swift.Double, merchantId: Swift.String, completion: @escaping (_ status: AmwalPay.PaymentResult) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay0aB6ButtonV4bodyQrvp", 0) __
}
public struct CardFormView : SwiftUI.View {
  public var completion: ((AmwalPay.CardDetails) -> Swift.Void)
  public init(colors: [SwiftUI.Color] = [.green, .blue, .black], completion: @escaping ((AmwalPay.CardDetails) -> Swift.Void))
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay12CardFormViewV4bodyQrvp", 0) __
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class OTPTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var otpDefaultCharacter: Swift.String
  @_Concurrency.MainActor(unsafe) public var otpBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var otpFilledBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var otpCornerRaduis: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var otpDefaultBorderColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var otpFilledBorderColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var otpDefaultBorderWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var otpFilledBorderWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var otpTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var otpFontSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var otpFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) weak public var otpDelegate: (any AmwalPay.AEOTPTextFieldDelegate)?
  @_Concurrency.MainActor(unsafe) public func configure(with slotCount: Swift.Int = 6)
  @_Concurrency.MainActor(unsafe) public func clearOTP()
  @_Concurrency.MainActor(unsafe) public func setText(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol AEOTPTextFieldDelegate : AnyObject {
  func didUserFinishEnter(the code: Swift.String)
}
public struct Unwrap<Value, Content, FallbackContent> : SwiftUI.View where Content : SwiftUI.View, FallbackContent : SwiftUI.View {
  public init(_ value: Value?, @SwiftUI.ViewBuilder content: @escaping (Value) -> Content, @SwiftUI.ViewBuilder fallbackContent: @escaping () -> FallbackContent)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay6UnwrapV4bodyQrvp", 0) __<Value, Content, FallbackContent>
}
extension AmwalPay.Unwrap where FallbackContent == Swift.Never {
  public init(_ value: Value?, @SwiftUI.ViewBuilder content: @escaping (Value) -> Content)
}
public struct PaymentRequest {
  public var merchantId: Swift.String
  public var currencyCode: AmwalPay.Currency
  public var currency: Swift.String {
    get
  }
  public var amount: Swift.Double
  public var vat: Swift.Double
  public var completion: (_ transactionId: AmwalPay.PaymentResult) -> Swift.Void
  public var total: Swift.Double {
    get
  }
  public init(merchantId: Swift.String, currencyCode: AmwalPay.Currency, amount: Swift.Double, vat: Swift.Double, completion: @escaping (_ transactionId: AmwalPay.PaymentResult) -> Swift.Void)
}
public protocol PaymentBuilder {
  func setMerchantId(_ merchantId: Swift.String) -> Self
  func setAmount(_ amount: Swift.Double) -> Self
  func setVat(_ vat: Swift.Double) -> Self
  func setCurrency(_ currency: AmwalPay.Currency) -> Self
  func setCompletion(_ completion: @escaping (_ transactionId: AmwalPay.PaymentResult) -> Swift.Void) -> Self
  func build() -> AmwalPay.PaymentRequest
}
public struct PaymentRequestBuilder : AmwalPay.PaymentBuilder {
  public init()
  public func setMerchantId(_ merchandId: Swift.String) -> AmwalPay.PaymentRequestBuilder
  public func setAmount(_ amount: Swift.Double) -> AmwalPay.PaymentRequestBuilder
  public func setVat(_ vat: Swift.Double) -> AmwalPay.PaymentRequestBuilder
  public func setCurrency(_ currency: AmwalPay.Currency) -> AmwalPay.PaymentRequestBuilder
  public func setCompletion(_ completion: @escaping (_ transactionId: AmwalPay.PaymentResult) -> Swift.Void) -> AmwalPay.PaymentRequestBuilder
  public func build() -> AmwalPay.PaymentRequest
}
public struct CreditCardView : SwiftUI.View {
  public init(backgroundColors: [SwiftUI.Color] = [.red, .orange], textColor: SwiftUI.Color = .white, cardNumber: SwiftUI.Binding<Swift.String>, cardExpiryDate: SwiftUI.Binding<Swift.String>, cardName: SwiftUI.Binding<Swift.String>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay14CreditCardViewV4bodyQrvp", 0) __
}
public protocol ViewModel : AmwalPay.CancelableStore, Combine.ObservableObject where Self.ObjectWillChangePublisher.Output == () {
  associatedtype State
  associatedtype Input
  var state: Self.State { get set }
  func trigger(_ input: Self.Input)
}
extension AmwalPay.ViewModel {
  public func toAnyViewModel() -> AmwalPay.AnyViewModel<Self.State, Self.Input>
}
extension AmwalPay.AnyViewModel : Swift.Identifiable where State : Swift.Identifiable {
  final public var id: State.ID {
    get
  }
  public typealias ID = State.ID
}
@dynamicMemberLookup final public class AnyViewModel<State, Input> : AmwalPay.ViewModel {
  final public var objectWillChange: Combine.AnyPublisher<Swift.Void, Swift.Never> {
    get
  }
  final public var state: State {
    get
    set
  }
  final public func trigger(_ input: Input)
  final public subscript<Value>(dynamicMember keyPath: Swift.KeyPath<State, Value>) -> Value {
    get
  }
  public init<V>(_ viewModel: V) where State == V.State, Input == V.Input, V : AmwalPay.ViewModel
  public typealias ObjectWillChangePublisher = Combine.AnyPublisher<Swift.Void, Swift.Never>
  @objc deinit
}
extension UIKit.UIColor {
  public static var darkGrayColor: UIKit.UIColor {
    get
  }
  public static var grayColor: UIKit.UIColor {
    get
  }
  public static var darkerGrayColor: UIKit.UIColor {
    get
  }
}
extension SwiftUI.Color {
  public static var isDarkInterfaceStyle: Swift.Bool {
    get
  }
  public static var primaryColor: SwiftUI.Color {
    get
  }
  public static var backgroundColor: SwiftUI.Color {
    get
  }
  public static var textFieldColor: SwiftUI.Color {
    get
  }
  public static var textFieldTextColor: SwiftUI.Color {
    get
  }
  public static var buttonColor: SwiftUI.Color {
    get
  }
}
public struct CardReaderView : SwiftUI.UIViewControllerRepresentable {
  public init(completionHandler: @escaping (AmwalPay.CardDetails?) -> Swift.Void)
  public typealias UIViewControllerType = VisionKit.VNDocumentCameraViewController
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: SwiftUI.UIViewControllerRepresentableContext<AmwalPay.CardReaderView>) -> VisionKit.VNDocumentCameraViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: VisionKit.VNDocumentCameraViewController, context: SwiftUI.UIViewControllerRepresentableContext<AmwalPay.CardReaderView>)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> AmwalPay.CardReaderView.Coordinator
  @objc @_hasMissingDesignatedInitializers final public class Coordinator : ObjectiveC.NSObject, VisionKit.VNDocumentCameraViewControllerDelegate, AmwalPay.ImageTextRecognizable {
    @objc final public func documentCameraViewController(_ controller: VisionKit.VNDocumentCameraViewController, didFinishWith scan: VisionKit.VNDocumentCameraScan)
    @objc final public func documentCameraViewControllerDidCancel(_ controller: VisionKit.VNDocumentCameraViewController)
    @objc final public func documentCameraViewController(_ controller: VisionKit.VNDocumentCameraViewController, didFailWithError error: any Swift.Error)
    @objc deinit
  }
  public typealias Body = Swift.Never
}
extension SwiftUI.Font.TextStyle {
  public var size: CoreFoundation.CGFloat {
    get
  }
}
public protocol TestDependencyKey {
  associatedtype Value : Swift.Sendable = Self
  static var previewValue: Self.Value { get }
  static var testValue: Self.Value { get }
}
public protocol DependencyKey : AmwalPay.TestDependencyKey {
  static var liveValue: Self.Value { get }
  associatedtype Value = Self
  static var previewValue: Self.Value { get }
  static var testValue: Self.Value { get }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TextFieldFormatter : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func deleteBackward()
  @_Concurrency.MainActor(unsafe) public var formattedText: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var unformattedText: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc deinit
}
public enum PaymentResult : Swift.Equatable {
  case success(transactionId: Swift.String)
  case fail(error: Swift.String)
  public static func == (a: AmwalPay.PaymentResult, b: AmwalPay.PaymentResult) -> Swift.Bool
}
public struct AmwalPaymentView : SwiftUI.View {
  public init(currency: AmwalPay.Currency, amount: Swift.Double, vat: Swift.Double, merchantId: Swift.String, completion: @escaping (_ status: AmwalPay.PaymentResult) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay0A11PaymentViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct PaymentRequestView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay18PaymentRequestViewV4bodyQrvp", 0) __
}
public protocol ImageTextRecognizable : VisionKit.VNDocumentCameraViewControllerDelegate {
}
extension AmwalPay.ImageTextRecognizable {
  public func validateImage(image: UIKit.UIImage?, completion: @escaping (AmwalPay.CardDetails?) -> Swift.Void)
  public func parseResults(for recognizedText: [Swift.String]) -> AmwalPay.CardDetails
}
public struct CardDetails : Swift.Hashable, Swift.Identifiable {
  public var number: Swift.String?
  public var name: Swift.String?
  public var expiryDate: Swift.String?
  public var cvcNumber: Swift.String?
  public var type: AmwalPay.CardType
  public var industry: AmwalPay.CardIndustry
  public init(numberWithDelimiters: Swift.String? = nil, name: Swift.String? = nil, expiryDate: Swift.String? = nil, cvcNumber: Swift.String? = nil)
  public var id: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AmwalPay.CardDetails, b: AmwalPay.CardDetails) -> Swift.Bool
  public typealias ID = Swift.Int
  public var hashValue: Swift.Int {
    get
  }
}
public enum CardType : Swift.String, Swift.CaseIterable, Swift.Identifiable {
  case masterCard
  case visa
  case amex
  case discover
  case dinersClubOrCarteBlanche
  case unknown
  public init(number: Swift.String?)
  public var id: Swift.Int {
    get
  }
  public var image: SwiftUI.Image? {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [AmwalPay.CardType]
  public typealias ID = Swift.Int
  public typealias RawValue = Swift.String
  public static var allCases: [AmwalPay.CardType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum CardIndustry : Swift.String, Swift.CaseIterable, Swift.Identifiable {
  case industry
  case airlines
  case airlinesFinancialAndFuture
  case travelAndEntertainment
  case bankingAndFinancial
  case merchandisingAndBanking
  case petroleum
  case healthcareAndTelecom
  case national
  case unknown
  public init(firstDigit: Swift.String.Element?)
  public var id: Swift.Int {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [AmwalPay.CardIndustry]
  public typealias ID = Swift.Int
  public typealias RawValue = Swift.String
  public static var allCases: [AmwalPay.CardIndustry] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum NetworkError : Foundation.LocalizedError, Swift.Equatable {
  case requestFailed(description: Swift.String)
  case jsonConversionFailure(description: Swift.String)
  case invalidData
  case responseUnsuccessful(description: Swift.String)
  case jsonParsingFailure
  case noInternet
  case failedSerialization
  case badRequest
  case errorResponse(message: Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: AmwalPay.NetworkError, b: AmwalPay.NetworkError) -> Swift.Bool
}
public protocol NetworkServiceProtocol {
  #if compiler(>=5.3) && $AsyncAwait
  func load<Response>(_: Response.Type, with api: AmwalPay.NetworkBuilder) async throws -> Response where Response : Swift.Decodable
  #endif
}
public enum ApiClient {
  #if compiler(>=5.3) && $AsyncAwait
  public static func load<Response>(_: Response.Type, with api: AmwalPay.NetworkBuilder, keyDecodingStrategy: Foundation.JSONDecoder.KeyDecodingStrategy? = .convertFromSnakeCase) async throws -> Response where Response : Swift.Decodable
  #endif
}
extension Swift.Int {
  public var isSuccess: Swift.Bool {
    get
  }
}
public struct CardFormField : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay13CardFormFieldV4bodyQrvp", 0) __
}
public struct EntryPoint {
  public init()
  public func start(paymentRequestBuilder: any AmwalPay.PaymentBuilder) -> AmwalPay.PaymentRequestView
}
public protocol Localizable {
  static func tr(_ bundle: Foundation.Bundle, _ key: Swift.String, _ args: any Swift.CVarArg...) -> Swift.String
}
extension AmwalPay.Localizable {
  public static func tr(_ bundle: Foundation.Bundle, _ key: Swift.String, _ args: any Swift.CVarArg...) -> Swift.String
}
@_hasMissingDesignatedInitializers final public class BundleToken {
  public static let bundle: Foundation.Bundle
  @objc deinit
}
public enum CardTextField {
  case cardNumber
  case cvv
  case cardHolder
  case dateExpiration
  public static func == (a: AmwalPay.CardTextField, b: AmwalPay.CardTextField) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreFoundation.CGFloat {
  public static var quarter: CoreFoundation.CGFloat
  public static var half: CoreFoundation.CGFloat
  public static var threeQuarters: CoreFoundation.CGFloat
}
public enum CairoFonts : Swift.String, Swift.CaseIterable {
  case regular
  case bold
  case semiBold
  case meduim
  case light
  case black
  case extraLight
  case extraBold
  public init?(rawValue: Swift.String)
  public typealias AllCases = [AmwalPay.CairoFonts]
  public typealias RawValue = Swift.String
  public static var allCases: [AmwalPay.CairoFonts] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum HorizonSpacing {
  case xxxl
  case xxl
  case xl
  case xsl
  case p40
  case l
  case m
  case mm
  case s
  case xxxxs
  case xxxs
  case xxs
  case xs
  case xss
  case xsss
  case xssss
  case sx
  public static func == (a: AmwalPay.HorizonSpacing, b: AmwalPay.HorizonSpacing) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreFoundation.CGFloat {
  public static func horizonSpacing(_ spacing: AmwalPay.HorizonSpacing) -> CoreFoundation.CGFloat
}
extension Swift.Double {
  public static func horizonSpacing(_ spacing: AmwalPay.HorizonSpacing) -> Swift.Double
}
public protocol CancelableStore : AnyObject {
  var cancelables: Swift.Set<Combine.AnyCancellable> { get set }
}
extension AmwalPay.CancelableStore {
  public var cancelables: Swift.Set<Combine.AnyCancellable> {
    get
    set
  }
}
public enum Currency : Swift.String {
  case AED
  case AUD
  case BGN
  case BRL
  case CAD
  case CHF
  case CLP
  case CNY
  case COP
  case CZK
  case DKK
  case EGP
  case EUR
  case GBP
  case HKD
  case HRK
  case HUF
  case IDR
  case ILS
  case INR
  case JPY
  case KRW
  case KZT
  case MXN
  case MYR
  case NGN
  case NOK
  case NZD
  case PEN
  case PKR
  case PHP
  case PLN
  case QAR
  case RON
  case RUB
  case SAR
  case SEK
  case SGD
  case THB
  case TRY
  case TWD
  case TZS
  case USD
  case VND
  case ZAR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct TextFieldModifier : SwiftUI.ViewModifier {
  public init(color: SwiftUI.Color, isFocused: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func body(content: AmwalPay.TextFieldModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay17TextFieldModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACG_tF", 0) __
}
public struct OTPView : SwiftUI.View {
  public init(text: SwiftUI.Binding<Swift.String>, slotsCount: Swift.Int = 6, width: CoreFoundation.CGFloat = UIScreen.main.bounds.width * 0.8, height: CoreFoundation.CGFloat = 40, otpDefaultCharacter: Swift.String = "", otpBackgroundColor: UIKit.UIColor = UIColor(red: 0.949, green: 0.949, blue: 0.949, alpha: 1), otpFilledBackgroundColor: UIKit.UIColor = UIColor(red: 0.949, green: 0.949, blue: 0.949, alpha: 1), otpCornerRaduis: CoreFoundation.CGFloat = 10, otpDefaultBorderColor: UIKit.UIColor = .darkGrayColor, otpFilledBorderColor: UIKit.UIColor = .black, otpDefaultBorderWidth: CoreFoundation.CGFloat = 0, otpFilledBorderWidth: CoreFoundation.CGFloat = 1, otpTextColor: UIKit.UIColor = .black, otpFontSize: CoreFoundation.CGFloat = 14, otpFont: UIKit.UIFont = UIFont.systemFont(ofSize: 14), isSecureTextEntry: Swift.Bool = false, enableClearOTP: Swift.Bool = false, onCommit: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay7OTPViewV4bodyQrvp", 0) __
}
public struct PrimaryButtonView : SwiftUI.View {
  public init(title: Swift.String, disabled: Swift.Bool, backgroundColor: SwiftUI.Color = .horizon(.interactiveEnableColor), focusColor: SwiftUI.Color = .horizon(.interactiveEnableColor).opacity(0.5), titleColor: SwiftUI.Color = .horizon(.whiteColor), action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay17PrimaryButtonViewV4bodyQrvp", 0) __
}
public struct TestPrimaryButton : SwiftUI.View {
  public init(title: Swift.String, disabled: SwiftUI.Binding<Swift.Bool>, backgroundColor: SwiftUI.Color = .horizon(.interactiveEnableColor), focusColor: SwiftUI.Color = .horizon(.interactiveEnableColor).opacity(0.5), titleColor: SwiftUI.Color = .horizon(.whiteColor), action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AmwalPay17TestPrimaryButtonV4bodyQrvp", 0) __
}
extension AmwalPay.HTTPMethod : Swift.Equatable {}
extension AmwalPay.HTTPMethod : Swift.Hashable {}
extension AmwalPay.HTTPMethod : Swift.RawRepresentable {}
extension AmwalPay.HorizonColor : Swift.Equatable {}
extension AmwalPay.HorizonColor : Swift.Hashable {}
extension AmwalPay.HorizonColor : Swift.RawRepresentable {}
extension AmwalPay.CardType : Swift.Equatable {}
extension AmwalPay.CardType : Swift.Hashable {}
extension AmwalPay.CardType : Swift.RawRepresentable {}
extension AmwalPay.CardIndustry : Swift.Equatable {}
extension AmwalPay.CardIndustry : Swift.Hashable {}
extension AmwalPay.CardIndustry : Swift.RawRepresentable {}
extension AmwalPay.CardTextField : Swift.Equatable {}
extension AmwalPay.CardTextField : Swift.Hashable {}
extension AmwalPay.CairoFonts : Swift.Equatable {}
extension AmwalPay.CairoFonts : Swift.Hashable {}
extension AmwalPay.CairoFonts : Swift.RawRepresentable {}
extension AmwalPay.HorizonSpacing : Swift.Equatable {}
extension AmwalPay.HorizonSpacing : Swift.Hashable {}
extension AmwalPay.Currency : Swift.Equatable {}
extension AmwalPay.Currency : Swift.Hashable {}
extension AmwalPay.Currency : Swift.RawRepresentable {}
